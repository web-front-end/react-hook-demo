{"version":3,"sources":["components/hooks/useTodoState.js","components/apis/todo.js","components/TodoForm.js","components/hooks/useInputState.js","components/TodoItem.js","components/EmptyAlert.js","components/TodoList.js","components/Footer.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["hooks_useTodoState","useTodoState","_useState","useState","_useState2","Object","slicedToArray","todos","setTodos","_useState3","_useState4","status","setStatus","useEffect","cb","localStorage","getItem","setItem","JSON","stringify","parse","listTodosMock","deleteTodo","id","arr","filter","todo","deleteTodoMock","toggleTodo","map","objectSpread","isComplete","updateTodoMock","addTodo","length","item","concat","addTodoMock","filterTodos","filteredTodos","listFilteredTodoMock","TodoForm","_ref","_useInputState","useInputState","value","setValue","reset","onChange","e","target","react_default","a","createElement","Form","onSubmit","event","preventDefault","Group","controlId","Control","type","placeholder","TodoItem","ListGroup","Item","className","onClick","xmlns","width","height","viewBox","d","EmptyAlert","Alert","dismissible","variant","Heading","TodoList","index","components_TodoItem","key","components_EmptyAlert","Footer","Todo","_useTodoState","components_TodoForm","components_TodoList","components_Footer","App","components_Todo","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c21e9b46.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\nimport {\n  addTodoMock,\n  deleteTodoMock,\n  listTodosMock,\n  updateTodoMock,\n  listFilteredTodoMock\n} from './../apis/todo'\n\nexport default useTodoState => {\n  const [todos, setTodos] = useState([])\n  const [status, setStatus] = useState('all')\n  // init todos\n  useEffect(() => {\n    listTodosMock(todos => {\n      setTodos(todos)\n    })\n  }, [])\n  return {\n    todos,\n    status,\n    deleteTodo: id => {\n      deleteTodoMock(id, todos => {\n        setTodos(todos)\n        setStatus('all')\n      })\n    },\n    toggleTodo: id => {\n      updateTodoMock(id, todos => {\n        setTodos(todos)\n        setStatus('all')\n      })\n    },\n    addTodo: todo => {\n      addTodoMock(todo, todos => {\n        setTodos(todos)\n        setStatus('all')\n      })\n    },\n    filterTodos: status => {\n      listFilteredTodoMock(status, todos => {\n        setTodos(todos)\n        setStatus(status)\n      })\n    }\n  }\n}\n","export const addTodoMock = (todo, cb) => {\n  const todos = JSON.parse(localStorage.getItem('todos'))\n  let arr = []\n  if (todos.length === 0) {\n    arr = [{ ...{ id: 1 }, item: todo.item, isComplete: false }]\n    localStorage.setItem('todos', JSON.stringify(arr))\n  } else {\n    arr = todos.concat([\n      { ...{ id: todos[todos.length - 1].id + 1 }, item: todo.item }\n    ])\n    localStorage.setItem('todos', JSON.stringify(arr))\n  }\n  if (typeof cb === 'function') {\n    cb(arr)\n  }\n}\n\nexport const deleteTodoMock = (id, cb) => {\n  const todos = JSON.parse(localStorage.getItem('todos'))\n  const arr = todos.filter(todo => todo.id !== id)\n  localStorage.setItem('todos', JSON.stringify(arr))\n  if (typeof cb === 'function') {\n    cb(arr)\n  }\n}\n\nexport const listTodosMock = cb => {\n  if (localStorage.getItem('todos') === null) {\n    localStorage.setItem('todos', JSON.stringify([]))\n  }\n  const todos = JSON.parse(localStorage.getItem('todos'))\n  if (typeof cb === 'function') {\n    cb(todos)\n  }\n}\n\nexport const updateTodoMock = (id, cb) => {\n  let todos = JSON.parse(localStorage.getItem('todos'))\n  todos = todos.map(todo => {\n    if (todo.id === id) {\n      return { ...todo, isComplete: !todo.isComplete }\n    } else {\n      return todo\n    }\n  })\n  localStorage.setItem('todos', JSON.stringify(todos))\n  if (typeof cb === 'function') {\n    cb(todos)\n  }\n}\n\nexport const listFilteredTodoMock = (status, cb) => {\n  let todos = JSON.parse(localStorage.getItem('todos'))\n  let filteredTodos = []\n  switch (status) {\n    case 'active': {\n      filteredTodos = todos.filter(todo => todo.isComplete !== true)\n      break\n    }\n    case 'completed': {\n      filteredTodos = todos.filter(todo => todo.isComplete === true)\n      break\n    }\n    default:\n      filteredTodos = todos\n  }\n  if (typeof cb === 'function') {\n    cb(filteredTodos)\n  }\n}\n","/* eslint-disable no-unused-vars */\nimport React from 'react'\nimport { Form } from 'react-bootstrap'\nimport { useInputState } from './hooks'\n\nconst TodoForm = ({ addTodo }) => {\n  const { value, reset, onChange } = useInputState()\n  return (\n    <Form onSubmit={event => {\n      event.preventDefault()\n      addTodo({ item: value })\n      reset()\n    }}>\n      <Form.Group controlId=\"formBasic\">\n        <Form.Control type=\"text\" placeholder=\"Enter Todo\" onChange={onChange} value={value}/>\n      </Form.Group>\n    </Form>\n  )\n}\n\nexport default TodoForm\n","import { useState } from 'react'\n\nexport default useInputState => {\n  const [value, setValue] = useState('')\n  return {\n    value,\n    reset: () => {\n      setValue('')\n    },\n    onChange: e => {\n      setValue(e.target.value)\n    }\n  }\n}\n","/* eslint-disable no-unused-vars */\nimport React from 'react'\nimport { ListGroup } from 'react-bootstrap'\n\nconst TodoItem = ({ todo, deleteTodo, toggleTodo }) => {\n  const { id, item, isComplete } = todo\n  return (\n    <ListGroup.Item>\n      <div className='todo-item'>\n        <span className={isComplete ? 'complete' : ''} onClick={() => toggleTodo(id)}>{item}</span>\n        <svg onClick={() => deleteTodo(id)}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path d=\"M3 6v18h18v-18h-18zm5 14c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm5 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm5 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm4-18v2h-20v-2h5.711c.9 0 1.631-1.099 1.631-2h5.315c0 .901.73 2 1.631 2h5.712z\" />\n        </svg>\n      </div>\n    </ListGroup.Item>\n  )\n}\n\nexport default TodoItem\n","/* eslint-disable no-unused-vars */\nimport React from 'react'\nimport { Alert } from 'react-bootstrap'\n\nconst EmptyAlert = () => {\n  return (\n    <Alert dismissible variant=\"warning\">\n      <Alert.Heading>Empty warning</Alert.Heading>\n      <p>\n        there is no todo item existed.\n      </p>\n    </Alert>\n  )\n}\n\nexport default EmptyAlert\n","/* eslint-disable no-unused-vars */\nimport React from 'react'\nimport TodoItem from './TodoItem'\nimport EmptyAlert from './EmptyAlert'\n\nconst TodoList = ({ todos, deleteTodo, toggleTodo }) => {\n  return todos && todos.length > 0 ? (\n    todos.map((todo, index) => (\n      <TodoItem\n        key={index}\n        todo={todo}\n        deleteTodo={deleteTodo}\n        toggleTodo={toggleTodo}\n      />\n    ))\n  ) : (\n    <EmptyAlert />\n  )\n}\n\nexport default TodoList\n","/* eslint-disable no-unused-vars */\nimport React from 'react'\n\nconst Footer = ({ todos, filterTodos, status }) => {\n  return (\n    <div className=\"action-footer\">\n      <span>{todos.length} items left</span>\n      <div className=\"action\">\n        <span className={status === 'all' ? 'active' : ''} onClick={() => filterTodos('all')}>All</span>\n        <span className={status === 'active' ? 'active' : ''} onClick={() => filterTodos('active')}>Active</span>\n        <span className={status === 'completed' ? 'active' : ''} onClick={() => filterTodos('completed')}>Completed</span>\n      </div>\n    </div>\n  )\n}\n\nexport default Footer\n","/* eslint-disable no-unused-vars */\nimport React from 'react'\n\nimport TodoForm from './TodoForm'\nimport TodoList from './TodoList'\nimport Footer from './Footer'\nimport { useTodoState } from './hooks'\n\nconst Todo = () => {\n  const { addTodo, todos, deleteTodo, toggleTodo, filterTodos, status } = useTodoState()\n  return (\n    <div className='todo-container'>\n      <TodoForm addTodo={addTodo}/>\n      <TodoList todos={todos} deleteTodo={deleteTodo} toggleTodo={toggleTodo}/>\n      <Footer todos={todos} filterTodos={filterTodos} status={status}/>\n    </div>\n  )\n}\n\nexport default Todo\n","/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react'\nimport Todo from './components/Todo'\nimport './App.css'\n\nclass App extends Component {\n  render () {\n    return (\n      <div className=\"app\">\n        <Todo />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","/* eslint-disable no-unused-vars */\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}